name: Create Tag - CI

on:
  workflow_call:
     inputs:
        GIT_USER_NAME:
          required: true
          type: string
        VERSION_TYPE_REPOSITORY_DEFAULT:
          required: false
          type: string
        EMAIL_NOTIFY:
          required: true
          type: string
          default: "true"
        EMAIL_SENDER_NAME:
          required: false
          type: string
     secrets:
        PAT:
          required: true
        GIT_USER_EMAIL:
          required: true
        WRAPPID_REGISTRY_TOKEN:
          required: true
  ## Below secrets are required if EMAIL_NOTIFY is TRUE
        EMAIL_SERVER_ADDRESS:
        EMAIL_SERVER_PORT:
        EMAIL_USER_ID:
        EMAIL_USER_PASSWORD:
        EMAIL_TO:
        EMAIL_CC:     ## Optional
        EMAIL_BCC:    ## Optional
          
jobs:        
    create-tag:
      name: Create Tag
      runs-on: ubuntu-latest
      permissions: write-all
      outputs:
        tag-version:  ${{ steps.extract_version.outputs.version }}
      steps:
  
        - name: üõ† Set up Node.js
          uses: actions/setup-node@v4
          with:
            node-version: 18
            registry-url: https://npm.pkg.github.com/wrappid
          env:
            NODE_AUTH_TOKEN: ${{secrets.WRAPPID_REGISTRY_TOKEN}}      

        - name: Setup Wrappid npm registry
          run: |
            npm config set @wrappid:registry https://npm.pkg.github.com/wrappid
            npm config set //npm.pkg.github.com/:_authToken ${{ secrets.WRAPPID_REGISTRY_TOKEN }}

        - name: üõí Checkout repository
          uses: actions/checkout@v4
          with:
            token: ${{ secrets.PAT }}
            fetch-depth: 0
  
        - name: üõ† Setup gh and git
          run: |
            # echo ${{secrets.PAT}} | gh auth login --with-token
            git config user.name "${{ inputs.GIT_USER_NAME }}"
            git config user.email "${{ secrets.GIT_USER_EMAIL }}"
  
        - name: üëÄ Process Inputs
          id: release-type-input
          run: |
            case "${{ github.event.inputs.version_type }}" in
              " -r patch" | " -r major" | " -r minor" )
                VERSION_TYPE_DEFAULT="${{ github.event.inputs.version_type }}"
                ;;
              * )
                if [ -n "${{ secrets.VERSION_TYPE_REPOSITORY_DEFAULT }}" ]; then
                  VERSION_TYPE_DEFAULT="${{ secrets.VERSION_TYPE_REPOSITORY_DEFAULT }}"
                else
                  VERSION_TYPE_DEFAULT=" -r patch"
                fi
                ;;
            esac
            ## SAFETY CHECK
            if [ -z "$VERSION_TYPE_DEFAULT" ]; then
              VERSION_TYPE_DEFAULT=" -r patch"
            fi

            echo "Version type: $VERSION_TYPE_DEFAULT"
            echo "::set-output name=version_type::$VERSION_TYPE_DEFAULT"


        - name: ‚¨áÔ∏è Setup Project
          run: | 
           echo Installing Node Modules
           npm ci
  
## TODO: 
##       ADD ATTRIBUTION TRIGGER
##       CHECK IF ANY CHANGES IN ATTRIBUTION
##       IF CHANGES FOUND, COMMIT

# - name: üîÑ Update Attribution
        #   run: |
        #    npm run attributions:gen
        #    chmod +x $ATTRIBUTION_SCRIPT_PATH
        #    bash $ATTRIBUTION_SCRIPT_PATH ${{ github.event.repository.name }}
        #    git pull
        #    git add ATTRIBUTIONS.md
        #    git commit -m "docs(global): :memo: update attribution

        #    update attributions content

        #    by Publish CI"
        #   env:
        #     GITHUB_TOKEN: ${{ secrets.PAT }}
        - name: Prepare for commit
          run: rm -f .gitignore

        - name: Find relative repository URL
          id: repo_url
          run: echo "repository_url=${{ github.repository }}" >> "$GITHUB_OUTPUT"

        - name: Update template version
          if: steps.repo_url.outputs.repository_url == 'wrappid/wrappid-app' || steps.repo_url.outputs.repository_url == 'wrappid/wrappid-service' || steps.repo_url.outputs.repository_url == 'wrappid/wrappid-module'
          run: | 
            curl -sSL https://raw.githubusercontent.com/wrappid/workflows/main/util-scripts/wrappid-tag.js > wrappid-tag.js
            curl -sSL https://raw.githubusercontent.com/wrappid/workflows/main/util-scripts/commit-message.sh > commit-message.sh
            node wrappid-tag.js ${{ steps.release-type-input.outputs.version_type }}
            rm -f wrappid-tag.js
            rm -f commit-message.*

        - name: ‚¨ÜÔ∏è Update version
          if: steps.repo_url.outputs.repository_url != 'wrappid/wrappid-app' && steps.repo_url.outputs.repository_url != 'wrappid/wrappid-service' && steps.repo_url.outputs.repository_url != 'wrappid/wrappid-module'
          run: npm run release -- ${{ steps.release-type-input.outputs.version_type }}

        - name: üöÄ Update remote repository
          run: git push --follow-tags origin development

        - name: Push Tags
          run: git push --tags

          
        - name: Extract version
          id: extract_version
          uses: Saionaro/extract-package-version@v1.0.6
    
        - name: Print version
          run: echo ${{ steps.extract_version.outputs.version }}


    print-version:
        runs-on: ubuntu-latest
        needs: create-tag
        permissions: write-all
        steps:
            - name: print
              run: echo ${{ needs.create-tag.outputs.tag-version }}

    call-send-email-tag-created:
          needs: create-tag
          if: ${{ inputs.EMAIL_NOTIFY }} == true
          permissions: write-all
          uses: wrappid/workflows/.github/workflows/send-email-tag-created.yml@main
          with:
            tag-version: ${{ needs.create-tag.outputs.tag-version }}
            EMAIL_SENDER_NAME: ${{ inputs.EMAIL_SENDER_NAME }}
          secrets:
            EMAIL_SERVER_ADDRESS: ${{ secrets.EMAIL_SERVER_ADDRESS }}
            EMAIL_SERVER_PORT: ${{ secrets.EMAIL_SERVER_PORT }}
            EMAIL_USER_ID: ${{ secrets.EMAIL_USER_ID }}
            EMAIL_USER_PASSWORD: ${{ secrets.EMAIL_USER_PASSWORD }}
            EMAIL_TO: ${{ secrets.EMAIL_TO }}
            EMAIL_CC: ${{ secrets.EMAIL_CC }}       ## Optional
            EMAIL_BCC: ${{ secrets.EMAIL_BCC }}     ## Optional

    call-send-email-failure:
        needs: [ create-tag ]
        if: always() && needs.create-tag.result == 'failure'
        permissions: write-all
        uses: wrappid/workflows/.github/workflows/send-email-failure.yml@main
        with:
          tag-version: ${{ needs.create-tag.outputs.tag-version }}
          EMAIL_SENDER_NAME: ${{ inputs.EMAIL_SENDER_NAME }}
        secrets:
          EMAIL_SERVER_ADDRESS: ${{ secrets.EMAIL_SERVER_ADDRESS }}
          EMAIL_SERVER_PORT: ${{ secrets.EMAIL_SERVER_PORT }}
          EMAIL_USER_ID: ${{ secrets.EMAIL_USER_ID }}
          EMAIL_USER_PASSWORD: ${{ secrets.EMAIL_USER_PASSWORD }}
          EMAIL_TO: ${{ secrets.EMAIL_TO }}
          EMAIL_CC: ${{ secrets.EMAIL_CC }}       ## Optional
          EMAIL_BCC: ${{ secrets.EMAIL_BCC }}     ## Optional
      
  
