on:
  workflow_call:
    inputs:
      GIT_USER_NAME:
        required: true
        type: string
      TOOLKIT_VERSION:
        required: true
        type: string
      EMAIL_NOTIFY:
        required: true
        type: string
        default: "true"
      EMAIL_SENDER_NAME:
        required: false
        type: string
    secrets:
      PAT:
        required: true
      GIT_USER_EMAIL:
        required: true
      WRAPPID_REGISTRY_TOKEN:
        required: true
## Below secrets are required if EMAIL_NOTIFY is TRUE
      EMAIL_SERVER_ADDRESS:
      EMAIL_SERVER_PORT:
      EMAIL_USER_ID:
      EMAIL_USER_PASSWORD:
      EMAIL_TO:
      EMAIL_CC:     ## Optional
      EMAIL_BCC:    ## Optional

name: Create Package Release - CD

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions: write-all
    outputs:
     tag-version: ${{ steps.tag.outputs.tag }}
     release-exist: ${{ steps.check_release.outputs.release_exists }}
    steps:
  
      - name: Check if tag is provided
        id: check_tag
        run: echo ::set-output name=tag_exists::$(if [ -n "${{ github.event.inputs.tag-name }}" ]; then echo "true"; else echo "false"; fi)

      - name: üõí Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          fetch-depth: 0

      - name: Get Current Tag
        id: current-tag
        uses: WyriHaximus/github-action-get-previous-tag@v1
        with:
          fallback: 1.0.0 # Optional fallback tag to use when no tag can be found

      - name: Print received tag from action
        run: echo ${{ steps.current-tag.outputs.tag }}

      - name: Process Inputs
        id: tag
        run: |
          if [ -n "${{ github.event.inputs.tag-name }}" ]; then
            echo "::set-output name=tag::${{ github.event.inputs.tag-name }}"
          else
            echo "::set-output name=tag::${{ steps.current-tag.outputs.tag }}"
          fi

      - name: Print final tag to checkout
        run: echo ${{ steps.tag.outputs.tag }}


      - name: Check if release exists
        id: check_release
        run: |
          TAG_NAME= ${{ steps.tag.outputs.tag }}
          echo $(gh release view $TAG_NAME --json tagName) > tempTagName.json
          RELEASE_EXISTS=$(cat tempTagName.json | jq .tagName)
          if [ -z "$RELEASE_EXISTS" ]; then
            echo "::set-output name=release_exists::false"
          else
            echo "::set-output name=release_exists::true"
          fi
        env:
          GH_TOKEN: ${{ secrets.PAT }}
      - name: Print release status
        run: |
          if [[ "${{ steps.check_release.outputs.release_exists }}" == "false" ]]; then
            echo "Release exists for tag ${{ steps.tag.outputs.tag }}."
          else
            echo "Release does not exist for tag ${{ steps.tag.outputs.tag }}."
          fi

      - name: üõí Checkout Repository
        if: ${{ steps.check_release.outputs.release_exists }} == "false"
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.tag.outputs.tag }}
          token: ${{ secrets.PAT }}
       
      - name: üõ† Set up Node.js
        if: ${{ steps.check_release.outputs.release_exists }} == "false"
        uses: actions/setup-node@v4
        with:
          node-version: 16
          cache: 'npm'
          registry-url: https://npm.pkg.github.com/wrappid
        env:
          NODE_AUTH_TOKEN: ${{secrets.WRAPPID_REGISTRY_TOKEN }} 
          
      - name: üõ† Setup gh and git
        if: ${{ steps.check_release.outputs.release_exists }} == "false"
        run: |
          echo ${{secrets.PAT}} | gh auth login --with-token
          git config user.name "${{ secrets.GHUSER_NAME }}"
          git config user.email "${{ secrets.GHUSER_EMAIL }}"


## TODO
# gh release view v0.0.409 --json name,tagName,createdAt,publishedAt --jq .name
# if release name not specified, takes latest

      - name: Extract version
        if: ${{ steps.check_release.outputs.release_exists }} == "false"
        id: extract-version
        uses: Saionaro/extract-package-version@v1.0.6

      - name: ‚¨áÔ∏è Setup Project
        if: ${{ steps.check_release.outputs.release_exists }} == "false"
        run: | 
         echo Installing Node Modules
         npm ci --omit-dev

      - name: Print version
        if: ${{ steps.check_release.outputs.release_exists }} == "false"
        run: echo ${{ steps.extract-version.outputs.version }}

      - name: üèóÔ∏è Build wrappid ${{ github.event.repository.name }}
        if: ${{ steps.check_release.outputs.release_exists }} == "false"
        run: npm run build

      - name: üì¶ Create Package
        if: ${{ steps.check_release.outputs.release_exists }} == "false"
        run: npm pack ./dist/

      - name: Find packaged name
        if: ${{ steps.check_release.outputs.release_exists }} == "false"
        id: find-packaged-name
        run: |
          packaged_name=$(find . -name "*.tgz" | xargs -I{} basename {})
          echo "::set-output name=packaged-name::$packaged_name"

      - name: Print file name of packaged artifact
        if: ${{ steps.check_release.outputs.release_exists }} == "false"
        run: echo ${{ steps.find-packaged-name.outputs.packaged-name }}

      - name: List files
        if: ${{ steps.check_release.outputs.release_exists }} == "false"
        run: ls -l

      - name: Generate Release notes
        if: ${{ steps.check_release.outputs.release_exists }} == "false"
        run: curl -o- https://raw.githubusercontent.com/wrappid/workflows/main/util-scripts/release_notes.sh | bash -s ${{ github.repository_owner }} ${{ github.event.repository.name }}

      - name: Create Release
        if: ${{ steps.check_release.outputs.release_exists }} == "false"
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT}} # Personal Access Token
        with:
          tag_name: v${{ steps.extract-version.outputs.version }}
          release_name: v${{ steps.extract-version.outputs.version }}
          body_path: ./RELEASE_NOTES.md
          draft: false
          prerelease: false

      - name: Upload Release Asset Package
        if: ${{ steps.check_release.outputs.release_exists }} == "false"
        id: upload-package-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT}} # Personal Access Token
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./${{ steps.find-packaged-name.outputs.packaged-name }}
          asset_name: ${{ steps.find-packaged-name.outputs.packaged-name }}
          asset_content_type: application/zip

  call-send-email-released:
      needs: create-release
      if: ${{ needs.create-release.outputs.release-exist }} == "false"
      permissions: write-all
      uses: wrappid/workflows/.github/workflows/send-email-released.yml@main
      with:
        tag-version: ${{ needs.create-release.outputs.tag-version }}
        EMAIL_SENDER_NAME: ${{ inputs.EMAIL_SENDER_NAME }}
      secrets:
        EMAIL_SERVER_ADDRESS: ${{ secrets.EMAIL_SERVER_ADDRESS }}
        EMAIL_SERVER_PORT: ${{ secrets.EMAIL_SERVER_PORT }}
        EMAIL_USER_ID: ${{ secrets.EMAIL_USER_ID }}
        EMAIL_USER_PASSWORD: ${{ secrets.EMAIL_USER_PASSWORD }}
        EMAIL_TO: ${{ secrets.EMAIL_TO }}
        EMAIL_CC: ${{ secrets.EMAIL_CC }}       ## Optional
        EMAIL_BCC: ${{ secrets.EMAIL_BCC }}     ## Optional