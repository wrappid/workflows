on:
    workflow_call:
      inputs:
        GIT_USER_NAME:
          required: true
          type: string
        TOOLKIT_VERSION:
          required: true
          type: string
        EMAIL_NOTIFY:
          required: true
          type: string
          default: "true"
        EMAIL_SENDER_NAME:
          required: false
          type: string
      secrets:
        PAT:
          required: true
        GIT_USER_EMAIL:
          required: true
        WRAPPID_REGISTRY_TOKEN:
          required: true
  ## Below secrets are required if EMAIL_NOTIFY is TRUE
        EMAIL_SERVER_ADDRESS:
        EMAIL_SERVER_PORT:
        EMAIL_USER_ID:
        EMAIL_USER_PASSWORD:
        EMAIL_TO:
        EMAIL_CC:     ## Optional
        EMAIL_BCC:    ## Optional

name: Create Service Release - CD

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions: write-all
    outputs:
     tag-version: ${{ steps.tag.outputs.tag }}
    steps:
  
      - name: Check if tag is provided
        id: check_tag
        run: echo ::set-output name=tag_exists::$(if [ -n "${{ github.event.inputs.tag-name }}" ]; then echo "true"; else echo "false"; fi)

      - name: üõí Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          fetch-depth: 0

      - name: Get Current Tag
        id: current-tag
        uses: WyriHaximus/github-action-get-previous-tag@v1
        with:
          fallback: 1.0.0 # Optional fallback tag to use when no tag can be found

      - name: Print received tag from action
        run: echo ${{ steps.current-tag.outputs.tag }}

      - name: Process Inputs
        id: tag
        run: |
          if [ -n "${{ github.event.inputs.tag-name }}" ]; then
            echo "::set-output name=tag::${{ github.event.inputs.tag-name }}"
          else
            echo "::set-output name=tag::${{ steps.current-tag.outputs.tag }}"
          fi

      - name: Print final tag to checkout
        run: echo ${{ steps.tag.outputs.tag }}

      - name: üõí Checkout Tag
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.tag.outputs.tag }}
          token: ${{ secrets.PAT }}
       
      - name: üõ† Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 16
          cache: 'npm'
          registry-url: https://npm.pkg.github.com/wrappid
        env:
          NODE_AUTH_TOKEN: ${{secrets.WRAPPID_REGISTRY_TOKEN }} 
          
      - name: üõ† Setup gh and git
        run: |
          echo ${{secrets.PAT}} | gh auth login --with-token
          git config user.name "${{ inputs.GIT_USER_NAME }}"
          git config user.email "${{ secrets.GIT_USER_EMAIL }}"


## TODO
# gh release view v0.0.409 --json name,tagName,createdAt,publishedAt --jq .name
# if release name not specified, takes latest

      # - name: üëÄ Process Inputs
      #   id: tag-version-input
      #   run: |
      #     if [ -z "${{ github.event.inputs.tag-name }}" ]; then
      #       echo "Input Blank. \nLatest Tag will be used for release creation"
      #       export TAG_VERSION_DEFAULT=""
      #     else
      #       export TAG_VERSION_DEFAULT="${{ github.event.inputs.tag-name }}"
      #     fi
      #     echo "Version type: $TAG_VERSION_DEFAULT"
      #     echo "::set-output name=tag-version::$TAG_VERSION_DEFAULT"

## TODO: CHECKOUT TAG


      - name: ‚¨áÔ∏è Setup Project
        run: | 
         echo Installing Node Modules
         npm ci --omit-dev

      - name: Setup Wrappid
        run: npm install -g @wrappid/toolkit@${{ inputs.TOOLKIT_VERSION }}

      - name: Check Wrappid Version
        run: wrappid --version

      - name: Wrappid Setup Service
        run: |
          gh auth status
          echo Starting Build.........................
          wrappid setup service --env=stage

      - name: Build wrappid service
        run: |
          gh auth status
          echo Starting Build.........................
          wrappid build service

      - name: Extract version
        id: extract_version
        uses: Saionaro/extract-package-version@v1.0.6

      - name: Print version
        run: echo ${{ steps.extract_version.outputs.version }}

      - name: Install zip
        run: sudo apt install zip -y

      - name: Zip build
        run: |
          cd build/service
          zip -r service-v${{ steps.extract_version.outputs.version }}.zip *

      - run: ls -l

      - name: Move Service zip to root
        run: mv build/service/service-v${{ steps.extract_version.outputs.version }}.zip service-v${{ steps.extract_version.outputs.version }}.zip


      - run: ls -l

      - name: Get wrappid logs
        run: cp $(npm root -g)/@wrappid/logs/logs.log wrappid-logs-v${{ steps.extract_version.outputs.version }}.log

      - name: Generate Release notes
        run: curl -o- https://raw.githubusercontent.com/wrappid/workflows/main/util-scripts/release_notes.sh | bash -s ${{ github.repository_owner }} ${{ github.event.repository.name }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT}} # Personal Access Token
        with:
          tag_name: v${{ steps.extract_version.outputs.version }}
          release_name: v${{ steps.extract_version.outputs.version }}
          body_path: ./RELEASE_NOTES.md
          draft: false
          prerelease: false

      - name: Upload Release Asset Service
        id: upload-service-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT}} # Personal Access Token
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./service-v${{ steps.extract_version.outputs.version }}.zip
          asset_name: "service-v${{ steps.extract_version.outputs.version }}.zip"
          asset_content_type: application/zip


      - name: Upload Release Asset Wrappid-Logs
        id: upload-log-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./wrappid-logs-v${{ steps.extract_version.outputs.version }}.log
          asset_name: "wrappid-logs-v${{ steps.extract_version.outputs.version }}.log"
          asset_content_type: text/plain


  call-send-email-released:
      needs: create-release
      permissions: write-all
      uses: wrappid/workflows/.github/workflows/send-email-released.yml@main
      with:
        tag-version: ${{ needs.create-release.outputs.tag-version }}
        EMAIL_SENDER_NAME: ${{ inputs.EMAIL_SENDER_NAME }}
      secrets:
        EMAIL_SERVER_ADDRESS: ${{ secrets.EMAIL_SERVER_ADDRESS }}
        EMAIL_SERVER_PORT: ${{ secrets.EMAIL_SERVER_PORT }}
        EMAIL_USER_ID: ${{ secrets.EMAIL_USER_ID }}
        EMAIL_USER_PASSWORD: ${{ secrets.EMAIL_USER_PASSWORD }}
        EMAIL_TO: ${{ secrets.EMAIL_TO }}
        EMAIL_CC: ${{ secrets.EMAIL_CC }}       ## Optional
        EMAIL_BCC: ${{ secrets.EMAIL_BCC }}     ## Optional